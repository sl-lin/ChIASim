library(ChIASim)
data("POL2")
head(POL2)
head(POL2)
data("TSS")
head(TSS)
output.base<- chiaSim(n.cells = 1E3, totalnumSites = 100, mc.cores.user = 48)
head(output.base)
libaray(ChIASim)
library(ChIASim)
?chiaSim
output.base<- chiaSim(n.cells = 1E3, totalnumSites = 100, mc.cores.user = 48)
output.base<- chiaSim(n.cells = 1E3, totalnumSites = 100, mc.cores.user = 4)
data("TSS",envir= environment())
TSS<- TSS
data("ERa",envir= environment())
TFBS<-ERa
colnames(TFBS)[1:3] <- c("chrom","chromStart","chromEnd")
chr.length <- getChromInfoFromUCSC("hg19")$size[1:23]
###### get TFBS information
TFBS<-TFBS[TFBS$chrom!="chrY",]
TFBS$midpoint<-(TFBS$chromStart+TFBS$chromEnd)/2
#Determine the portion of total number of pairs allocate to each chr
allocateNumPairs.TFBS <- vector()
for(i in 1:length(unique(TFBS$chrom))){
allocateNumPairs.TFBS[i] <- length(which(TFBS$chrom == (unique(TFBS$chrom)[i])))/length(TFBS$chrom)
}
library("BSgenome.Hsapiens.UCSC.hg19")
chr.length <- getChromInfoFromUCSC("hg19")$size[1:23]
###### get TFBS information
TFBS<-TFBS[TFBS$chrom!="chrY",]
TFBS$midpoint<-(TFBS$chromStart+TFBS$chromEnd)/2
#Determine the portion of total number of pairs allocate to each chr
allocateNumPairs.TFBS <- vector()
for(i in 1:length(unique(TFBS$chrom))){
allocateNumPairs.TFBS[i] <- length(which(TFBS$chrom == (unique(TFBS$chrom)[i])))/length(TFBS$chrom)
}
library(BSgenome.Hsapiens.UCSC.hg19)
chr.length <- getChromInfoFromUCSC("hg19")$size[1:23]
###### get TFBS information
TFBS<-TFBS[TFBS$chrom!="chrY",]
TFBS$midpoint<-(TFBS$chromStart+TFBS$chromEnd)/2
#Determine the portion of total number of pairs allocate to each chr
allocateNumPairs.TFBS <- vector()
for(i in 1:length(unique(TFBS$chrom))){
allocateNumPairs.TFBS[i] <- length(which(TFBS$chrom == (unique(TFBS$chrom)[i])))/length(TFBS$chrom)
}
require("GenomicFeatures", quietly = TRUE)
chr.length <- getChromInfoFromUCSC("hg19")$size[1:23]
###### get TFBS information
TFBS<-TFBS[TFBS$chrom!="chrY",]
TFBS$midpoint<-(TFBS$chromStart+TFBS$chromEnd)/2
#Determine the portion of total number of pairs allocate to each chr
allocateNumPairs.TFBS <- vector()
for(i in 1:length(unique(TFBS$chrom))){
allocateNumPairs.TFBS[i] <- length(which(TFBS$chrom == (unique(TFBS$chrom)[i])))/length(TFBS$chrom)
}
temp<-strsplit(TSS[,6],",")
TSS<-TSS[(sapply(temp,length)==1) & (sapply(temp,"[",1)!="n/a"),] #Remove isoforms with multiple gene symbols or no gene symbols
TSS[,6]<-gsub(",","",TSS[,6])
# remove "complicated" genes
exclude.gene.1<-unique(TSS[grepl("_|M|Un|Y",TSS[,2]),6])
temp<-by(TSS[,3],TSS[,6],function(x){length(unique(x))}) #Check if a gene appear in two different chrs
exclude.gene.2<-names(temp)[temp>1]
TSS<-TSS[!(TSS[,6] %in% union(exclude.gene.1,exclude.gene.2)),]
# get TSS information
TSS[,7]<-ifelse(TSS[,3]=="+",TSS[,4]+1,TSS[,5]) #get a starting position (TSS)
TSS<-unique(TSS[,c(2,6,7)])
colnames(TSS)<-c("chr","gene","TSS")
#Determine the portion of total number of pairs allocate to each chr
allocateNumPairs.TSS <- vector()
for(i in 1:length(unique(TSS$chr))){
allocateNumPairs.TSS[i] <- length(which(TSS$chr == (unique(TSS$chr)[i])))/length(TSS$chr)
}
numSites.TFBS <- round(totalnumSites*allocateNumPairs.TFBS)# 3 - 17
numSites.TSS <- round(totalnumSites*allocateNumPairs.TSS) # 3 - 20
TFBS.selected<-mat.or.vec(23,2*max(numSites.TFBS)); TFBS.selected.id<-mat.or.vec(23, 2*max(numSites.TFBS)) #23*34
TSS.selected<-mat.or.vec(23,2*max(numSites.TSS)); TSS.selected.id<-mat.or.vec(23,2*max(numSites.TSS)) #23*40
totalnumSites=100
numSites.TFBS <- round(totalnumSites*allocateNumPairs.TFBS)# 3 - 17
numSites.TSS <- round(totalnumSites*allocateNumPairs.TSS) # 3 - 20
TFBS.selected<-mat.or.vec(23,2*max(numSites.TFBS)); TFBS.selected.id<-mat.or.vec(23, 2*max(numSites.TFBS)) #23*34
TSS.selected<-mat.or.vec(23,2*max(numSites.TSS)); TSS.selected.id<-mat.or.vec(23,2*max(numSites.TSS)) #23*40
numSites.TFBS
TSS.selected
i=1
j=1
expand.grid(i,j,(numSites.TFBS[i]+1):(numSites.TFBS[i]+numSites.TFBS[i]),(numSites.TSS[j]+1):(numSites.TSS[j]+numSites.TSS[j]))
numSites.TSS
